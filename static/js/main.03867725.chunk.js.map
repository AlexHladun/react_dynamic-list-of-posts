{"version":3,"sources":["components/User.js","components/Comment.js","components/CommentList.js","components/Post.js","components/PostList.js","serviceWorker.js","index.js","App.js"],"names":["User","react_default","a","createElement","className","this","props","user","name","email","Component","Comment","key","id","comments","body","CommentList","Comment_Comment","Post","post","users","title","User_User","CommentList_CommentList","PostList","_this","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","state","items","getItem","bind","assertThisInitialized","sortTitle","url","fetch","then","data","json","_this2","Promise","all","loadData","_ref","_ref2","slicedToArray","posts","setState","map","item","objectSpread","find","userId","comment","postId","sort","b","localeCompare","onClick","Post_Post","Boolean","window","location","hostname","match","ReactDOM","render","PostList_PostList","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.03867725.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\n\r\nexport default class User extends Component {\r\n  render() {\r\n    return (\r\n      <div className=\"author-email\">\r\n        <span> - <strong>{this.props.user.name}</strong></span>\r\n        <span> {this.props.user.email}</span>\r\n      </div>\r\n    )\r\n  }\r\n\r\n}\r\n","import React, { Component } from 'react'\r\n\r\nexport default class Comment extends Component {\r\n  render() {\r\n    return (\r\n        <p key={this.props.id}>Comments: {this.props.comments.body}</p>\r\n    )\r\n  }\r\n}\r\n","import React, { Component } from 'react'\r\nimport Comment from './Comment'\r\n\r\nexport default class CommentList extends Component {\r\n  render() {\r\n    return (\r\n      <div>\r\n          <Comment comments={this.props.comments}/>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n","import React, { Component } from 'react'\r\nimport User from './User';\r\nimport CommentList from './CommentList';\r\n\r\nexport default class Post extends Component {\r\n  render() {\r\n    const user = this.props.post.users\r\n    const comments = this.props.post.comments\r\n    return (\r\n      <div >\r\n        <h1 key={this.props.key}>Title: {this.props.post.title} </h1>\r\n        <p>{this.props.post.body}</p>\r\n        <User\r\n          user={user} />\r\n        <CommentList comments={comments} />\r\n      </div>\r\n    )\r\n  }\r\n}\r\n","import React, { Component } from 'react'\r\nimport Post from './Post';\r\n\r\nexport default class PostList extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      items: []\r\n    }\r\n    this.getItem = this.getItem.bind(this);\r\n    this.sortTitle = this.sortTitle.bind(this);\r\n  }\r\n\r\n  loadData(url){\r\n    return fetch(url)\r\n      .then(data => data.json().then(data => data))\r\n  };\r\n  \r\n  getItem() {\r\n    Promise.all([this.loadData(' https://jsonplaceholder.typicode.com/posts'),\r\n    this.loadData('https://jsonplaceholder.typicode.com/users'),\r\n    this.loadData('https://jsonplaceholder.typicode.com/comments')])\r\n      .then(([posts, users, comments]) => this.setState({\r\n        items: posts.map(item => ({\r\n          ...item,\r\n          users: users.find(user => user.id === item.userId),\r\n          comments: comments.find(comment => comment.postId === item.userId)\r\n        }))\r\n      }));\r\n  }\r\n\r\n  sortTitle() {\r\n    this.setState(state => ({\r\n      items: state.items.sort((a,b) => a.title.localeCompare(b.title))\r\n    }))\r\n  }\r\n  render() {\r\n    return (\r\n      <div>\r\n        <button onClick={this.getItem}>Load Data</button>\r\n        <button onClick={this.sortTitle}>Sort title</button>\r\n        {this.state.items.map(post => \r\n        <Post \r\n          key={post.id} \r\n          post={post}\r\n          />)}\r\n      </div>\r\n    )\r\n  }\r\n}\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\nserviceWorker.unregister();\n","import React from 'react';\nimport PostList from './components/PostList';\nimport './App.css';\n\nexport default function App(){\n    return (\n      <div>\n       <PostList />\n      </div>\n    )\n}\n\n"],"sourceRoot":""}